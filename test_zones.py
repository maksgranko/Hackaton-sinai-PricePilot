"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∑–æ–Ω –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö"""
import json
from datetime import datetime
from src.recommend_price import recommend_price

# –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–µ–∑–¥–∫–∞
print("="*70)
print("–¢–ï–°–¢ 1: –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–µ–∑–¥–∫–∞ (1.5 –∫–º, —É—Ç—Ä–æ)")
print("="*70)
test1 = {
    "order_timestamp": int(datetime(2025, 10, 18, 8, 30).timestamp()),
    "distance_in_meters": 1500,
    "duration_in_seconds": 180,
    "pickup_in_meters": 800,
    "pickup_in_seconds": 90,
    "driver_rating": 4.9,
    "platform": "android",
    "price_start_local": 150,
    "carname": "LADA",
    "carmodel": "GRANTA",
    "driver_reg_date": "2020-01-15"
}
result1 = recommend_price(test1, output_json=False)
print(f"\nüìç –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result1['optimal_price']['price']}‚ÇΩ")
print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {result1['optimal_price']['probability_percent']}%")
print(f"   –ó–æ–Ω–∞: {result1['optimal_price']['zone_id']}")
print("\nüìä –ó–æ–Ω—ã:")
for zone in result1['zones']:
    print(f"   {zone['zone_name']:25s} {zone['price_range']['min']:6.1f}-{zone['price_range']['max']:6.1f}‚ÇΩ  "
          f"(–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {zone['metrics']['avg_probability_percent']:5.1f}%)")

# –¢–µ—Å—Ç 2: –î–ª–∏–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞
print("\n" + "="*70)
print("–¢–ï–°–¢ 2: –î–ª–∏–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ (15 –∫–º, –≤–µ—á–µ—Ä)")
print("="*70)
test2 = {
    "order_timestamp": int(datetime(2025, 10, 18, 19, 0).timestamp()),
    "distance_in_meters": 15000,
    "duration_in_seconds": 1200,
    "pickup_in_meters": 2000,
    "pickup_in_seconds": 180,
    "driver_rating": 5.0,
    "platform": "ios",
    "price_start_local": 400,
    "carname": "Toyota",
    "carmodel": "Camry",
    "driver_reg_date": "2018-05-20"
}
result2 = recommend_price(test2, output_json=False)
print(f"\nüìç –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result2['optimal_price']['price']}‚ÇΩ")
print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {result2['optimal_price']['probability_percent']}%")
print(f"   –ó–æ–Ω–∞: {result2['optimal_price']['zone_id']}")
print("\nüìä –ó–æ–Ω—ã:")
for zone in result2['zones']:
    print(f"   {zone['zone_name']:25s} {zone['price_range']['min']:6.1f}-{zone['price_range']['max']:6.1f}‚ÇΩ  "
          f"(–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {zone['metrics']['avg_probability_percent']:5.1f}%)")

# –¢–µ—Å—Ç 3: –°—Ä–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞ –Ω–æ—á—å—é
print("\n" + "="*70)
print("–¢–ï–°–¢ 3: –°—Ä–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞ (5 –∫–º, –Ω–æ—á—å)")
print("="*70)
test3 = {
    "order_timestamp": int(datetime(2025, 10, 18, 23, 30).timestamp()),
    "distance_in_meters": 5000,
    "duration_in_seconds": 600,
    "pickup_in_meters": 1500,
    "pickup_in_seconds": 150,
    "driver_rating": 4.7,
    "platform": "android",
    "price_start_local": 250,
    "carname": "Renault",
    "carmodel": "Logan",
    "driver_reg_date": "2021-03-10"
}
result3 = recommend_price(test3, output_json=False)
print(f"\nüìç –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result3['optimal_price']['price']}‚ÇΩ")
print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {result3['optimal_price']['probability_percent']}%")
print(f"   –ó–æ–Ω–∞: {result3['optimal_price']['zone_id']}")
print("\nüìä –ó–æ–Ω—ã:")
for zone in result3['zones']:
    print(f"   {zone['zone_name']:25s} {zone['price_range']['min']:6.1f}-{zone['price_range']['max']:6.1f}‚ÇΩ  "
          f"(–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {zone['metrics']['avg_probability_percent']:5.1f}%)")

print("\n" + "="*70)
print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
print("="*70)

