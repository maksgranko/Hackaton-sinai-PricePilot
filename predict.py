"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª PREDICT.csv —Å –∫–æ–ª–æ–Ω–∫–æ–π is_done (done/cancel).
"""

import pandas as pd
import numpy as np
import joblib
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.train_model import build_enhanced_features, train_model

def predict_test_data(
    test_path="test.csv",
    model_path="model_enhanced.joblib",
    output_path="PREDICT.csv",
    threshold=0.5,
    train_if_missing=True
):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        test_path: –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
        model_path: –ø—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        threshold: –ø–æ—Ä–æ–≥ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (done –µ—Å–ª–∏ proba >= threshold)
        train_if_missing: –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    
    Returns:
        DataFrame —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    """
    print("\n" + "="*70)
    print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –î–õ–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("="*70)
    
    # ============================================================
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
    # ============================================================
    if not os.path.exists(model_path):
        print(f"\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        
        if train_if_missing:
            print("üìö –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ train –¥–∞–Ω–Ω—ã—Ö...")
            try:
                model, _ = train_model(
                    train_path="simple-train.csv",
                    soft_cleaning=True,
                    test_size=0.2,
                    random_state=42
                )
                print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
            except FileNotFoundError:
                print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª simple-train.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("   –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python src/train_model.py")
                return None
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
                return None
        else:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python src/train_model.py")
            return None
    
    # ============================================================
    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    # ============================================================
    print(f"\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ {model_path}...")
    try:
        model = joblib.load(model_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None
    
    # ============================================================
    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # ============================================================
    print(f"\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ {test_path}...")
    try:
        df_test = pd.read_csv(test_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_test)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(df_test.columns)}")
    except FileNotFoundError:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª {test_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return None
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–µ–π–∫–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É is_done –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏)
    # –û–Ω–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    if 'is_done' not in df_test.columns:
        df_test['is_done'] = 'cancel'  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print("   ‚ÑπÔ∏è  –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ 'is_done' –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    required_columns = [
        'order_timestamp', 'tender_timestamp', 'driver_reg_date',
        'distance_in_meters', 'duration_in_seconds', 'price_bid_local',
        'price_start_local', 'pickup_in_meters', 'pickup_in_seconds',
        'driver_rating', 'carname', 'carmodel', 'platform',
        'user_id', 'driver_id'
    ]
    
    missing_cols = [col for col in required_columns if col not in df_test.columns]
    if missing_cols:
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
        print("   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏!")
    
    # ============================================================
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    # ============================================================
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        X_test = build_enhanced_features(df_test)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {X_test.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {X_test.shape[0]} –∑–∞–ø–∏—Å–µ–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º –∫–∞—á–µ—Å—Ç–≤–∞
        if 'data_quality_index' in X_test.columns:
            avg_quality = X_test['data_quality_index'].mean()
            high_quality = (X_test['is_high_quality'] == 1).sum()
            suspicious = (X_test['is_suspicious'] == 1).sum()
            low_quality = (X_test['is_low_quality'] == 1).sum()
            
            print(f"\nüìä –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.3f}")
            print(f"   –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {high_quality} ({high_quality/len(X_test)*100:.1f}%)")
            print(f"   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ:   {suspicious} ({suspicious/len(X_test)*100:.1f}%)")
            print(f"   –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:  {low_quality} ({low_quality/len(X_test)*100:.1f}%)")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return None
    
    # ============================================================
    # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    # ============================================================
    print(f"\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–ø–æ—Ä–æ–≥: {threshold})...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        probabilities = model.predict_proba(X_test)[:, 1]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ done/cancel
        # ============================================================
        # üéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º data_quality_index –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        # ============================================================
        # –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ "–ø—Ä–∏–º–µ—Ç –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –∑–∞–∫–∞–∑", –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ"
        # –ü–æ—ç—Ç–æ–º—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        
        if 'data_quality_index' in X_test.columns:
            print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º data_quality_index –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
            quality_index = X_test['data_quality_index'].values
            
            # –ü—Ä–∞–≤–∏–ª–æ: quality_index >= 0.5 ‚Üí DONE (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            predictions = np.where(quality_index >= 0.5, 'done', 'cancel')
            
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ quality_index:")
            print(f"      –ú–∏–Ω–∏–º—É–º:  {quality_index.min():.4f}")
            print(f"      –°—Ä–µ–¥–Ω–µ–µ:  {quality_index.mean():.4f}")
            print(f"      –ú–∞–∫—Å–∏–º—É–º: {quality_index.max():.4f}")
        else:
            print(f"\n‚ö†Ô∏è  data_quality_index –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
            predictions = np.where(probabilities >= threshold, 'done', 'cancel')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        n_done = (predictions == 'done').sum()
        n_cancel = (predictions == 'cancel').sum()
        
        print(f"\n‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"   done:   {n_done:5d} ({n_done/len(predictions)*100:5.1f}%)")
        print(f"   cancel: {n_cancel:5d} ({n_cancel/len(predictions)*100:5.1f}%)")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
        print(f"   –ú–∏–Ω–∏–º—É–º:  {probabilities.min():.3f}")
        print(f"   Q1:       {np.percentile(probabilities, 25):.3f}")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞:  {np.median(probabilities):.3f}")
        print(f"   Q3:       {np.percentile(probabilities, 75):.3f}")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: {probabilities.max():.3f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ:  {probabilities.mean():.3f}")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return None
    
    # ============================================================
    # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # ============================================================
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {output_path}...")
    try:
        # –°–æ–∑–¥–∞—ë–º DataFrame —Å –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π is_done
        result = pd.DataFrame({
            'is_done': predictions
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        result.to_csv(output_path, index=False)
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        print(f"   –§–æ—Ä–º–∞—Ç: {len(result)} —Å—Ç—Ä–æ–∫ √ó 1 –∫–æ–ª–æ–Ω–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
        saved = pd.read_csv(output_path)
        print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(saved.columns)}")
        print(f"   –°—Ç—Ä–æ–∫: {len(saved)}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {saved['is_done'].unique()}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        detailed_output = output_path.replace('.csv', '_detailed.csv')
        result_detailed = pd.DataFrame({
            'is_done': predictions,
            'probability': probabilities,
            'data_quality_index': X_test['data_quality_index'].values if 'data_quality_index' in X_test.columns else np.nan
        })
        result_detailed.to_csv(detailed_output, index=False)
        print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞): {detailed_output}")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None
    
    # ============================================================
    # 7. –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    # ============================================================
    print("\n" + "="*70)
    print("‚úÖ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!")
    print("="*70)
    print(f"\nüìÑ –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {output_path}")
    print(f"   –§–æ—Ä–º–∞—Ç: CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π 'is_done'")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: 'done' (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π) –∏–ª–∏ 'cancel' (–Ω–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)")
    print(f"   –ó–∞–ø–∏—Å–µ–π: {len(result)}")
    print(f"\nüí° –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ: {detailed_output}")
    print(f"   (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö)")
    
    return result

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    )
    parser.add_argument(
        "--test_path",
        type=str,
        default="test.csv",
        help="–ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É"
    )
    parser.add_argument(
        "--model_path",
        type=str,
        default="model_enhanced.joblib",
        help="–ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"
    )
    parser.add_argument(
        "--output_path",
        type=str,
        default="PREDICT.csv",
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
    )
    parser.add_argument(
        "--threshold",
        type=float,
        default=0.5,
        help="–ü–æ—Ä–æ–≥ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (0.0-1.0)"
    )
    parser.add_argument(
        "--no_train",
        action="store_true",
        help="–ù–µ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    )
    
    args = parser.parse_args()
    
    try:
        result = predict_test_data(
            test_path=args.test_path,
            model_path=args.model_path,
            output_path=args.output_path,
            threshold=args.threshold,
            train_if_missing=not args.no_train
        )
        
        if result is not None:
            print("\nüéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª PREDICT.csv —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

