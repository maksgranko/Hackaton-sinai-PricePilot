import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
from src.train_model import train_model
from src.recommend_price import recommend_price


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    
    print("="*80)
    print("üöï ML-–°–ò–°–¢–ï–ú–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –¶–ï–ù –î–õ–Ø –¢–ê–ö–°–ò (v3.0)")
    print("="*80)
    print("‚ú® –ù–æ–≤–æ–µ:")
    print("   ‚Ä¢ XGBoost (–±—ã—Å—Ç—Ä–µ–µ –≤ 3x)")
    print("   ‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ç–∞–∫—Å–∏ (—ç–∫–æ–Ω–æ–º/–∫–æ–º—Ñ–æ—Ä—Ç/–±–∏–∑–Ω–µ—Å)")
    print("   ‚Ä¢ 54 –ø—Ä–∏–∑–Ω–∞–∫–∞ (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)")
    print("   ‚Ä¢ –í—Å–µ 5 —Ü–µ–Ω–æ–≤—ã—Ö –∑–æ–Ω")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    model_path = "model_enhanced.joblib"
    if not os.path.exists(model_path):
        print("\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        print("="*80)
        try:
            print("üéÆ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU...")
            train_model(train_path="simple-train.csv", use_gpu=True)
        except Exception as e:
            print(f"\n‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)[:100]}")
            print("üíª –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU...")
            train_model(train_path="simple-train.csv", use_gpu=False)
        print("\n" + "="*80)
    else:
        print(f"\n‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        print("   –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ.")
        print("="*80)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüìã –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–°:")
    print("="*80)
    
    # –ü—Ä–∏–º–µ—Ä —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ —Ç–∞–∫—Å–∏
    order = {
        "order_timestamp": int(datetime.now().timestamp()),
        "distance_in_meters": 404,
        "duration_in_seconds": 15,
        "pickup_in_meters": 790,
        "pickup_in_seconds": 169,
        "driver_rating": 5,
        "platform": "android",
        "price_start_local": 180,
        "carname": "Toyota",
        "carmodel": "Camry"
    }
    
    print("\n2Ô∏è‚É£  –ó–∞–∫–∞–∑ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ (Toyota Camry):")
    print(f"   –ú–∞—Ä–∫–∞: {order['carname']}")
    print(f"   –ú–æ–¥–µ–ª—å: {order['carmodel']}")
    
    result = recommend_price(order, output_format='dict')
    print(f"\n   üéØ –¢–∏–ø —Ç–∞–∫—Å–∏: {result['taxi_type']} (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω)")
    print(f"   üí∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result['optimal_price']['price']} —Ä—É–±")
    print(f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['optimal_price']['probability_percent']}%")
    print(f"   üìà –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {result['optimal_price']['expected_value']} —Ä—É–±")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
    print("\n" + "="*80)
    print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê")
    print("="*80)
    
    output_file = "recommendation_result.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_file}")
    print("\n" + "="*80)
    print("üéâ –ì–û–¢–û–í–û!")
    print("="*80)


if __name__ == "__main__":
    main()
